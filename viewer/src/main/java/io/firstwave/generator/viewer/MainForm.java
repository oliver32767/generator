package io.firstwave.generator.viewer;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;

/**
 * Created by waxwing on 2/1/14.
 */
public class MainForm {

	private JPanel root;
	private JTabbedPane tabbedPane;
	private JTextPane config;
	private JButton button;
	private JScrollPane scrollPane;
	private JSlider zoom;
	private JButton resetZoom;
	private JButton resetButton;
	private JComboBox rendererSelector;
	private JTextField message;
	private JScrollPane checklist;
	private JSplitPane splitPane;

	public JPanel getRoot() {
		return root;
	}

	public JTabbedPane getTabbedPane() {
		return tabbedPane;
	}

	public JTextPane getConfig() {
		return config;
	}

	public JButton getButton() {
		return button;
	}

	public JScrollPane getScrollPane() {
		return scrollPane;
	}

	public JTextField getMessage() {
		return message;
	}

	public JSlider getZoom() {
		return zoom;
	}

	public JButton getResetZoom() {
		return resetZoom;
	}

	public JButton getResetButton() {
		return resetButton;
	}

	public JComboBox getRendererSelector() {
		return rendererSelector;
	}

	public JScrollPane getChecklist() {
		return checklist;
	}

	public JSplitPane getSplitPane() {
		return splitPane;
	}

	private void createUIComponents() {
		// TODO: place custom component creation code here
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		root = new JPanel();
		root.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
		tabbedPane = new JTabbedPane();
		root.add(tabbedPane, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(200, 200), null, 0, false));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
		tabbedPane.addTab("Output", panel1);
		resetZoom = new JButton();
		resetZoom.setText("1.00");
		resetZoom.setToolTipText("click to reset scale");
		panel1.add(resetZoom, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
		zoom = new JSlider();
		panel1.add(zoom, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		splitPane = new JSplitPane();
		panel1.add(splitPane, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
		scrollPane = new JScrollPane();
		splitPane.setLeftComponent(scrollPane);
		checklist = new JScrollPane();
		splitPane.setRightComponent(checklist);
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
		tabbedPane.addTab("Config", panel2);
		final JScrollPane scrollPane1 = new JScrollPane();
		panel2.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		config = new JTextPane();
		config.setFont(new Font("Monospaced", config.getFont().getStyle(), config.getFont().getSize()));
		scrollPane1.setViewportView(config);
		resetButton = new JButton();
		resetButton.setText("Reset");
		panel2.add(resetButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(100, -1), new Dimension(100, -1), new Dimension(100, -1), 0, false));
		button = new JButton();
		button.setText("Go");
		root.add(button, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(100, -1), new Dimension(100, -1), new Dimension(100, -1), 0, false));
		rendererSelector = new JComboBox();
		rendererSelector.setToolTipText("Select Renderer");
		root.add(rendererSelector, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		message = new JTextField();
		message.setEditable(false);
		root.add(message, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return root;
	}
}
